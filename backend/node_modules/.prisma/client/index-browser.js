
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.3.0
 * Query Engine version: 33838b0f78f1fe9052cf9a00e9761c9dc097a63c
 */
Prisma.prismaVersion = {
  client: "3.3.0",
  engine: "33838b0f78f1fe9052cf9a00e9761c9dc097a63c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  password: 'password',
  deleted: 'deleted'
});

exports.Prisma.RolesScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  role: 'role'
});

exports.Prisma.GuruScalarFieldEnum = makeEnum({
  id: 'id',
  nig: 'nig',
  nigs: 'nigs',
  kodeGuru: 'kodeGuru',
  nama: 'nama',
  email: 'email',
  jenisKelamin: 'jenisKelamin',
  tempatLahir: 'tempatLahir',
  tanggalLahir: 'tanggalLahir',
  tanggalMasuk: 'tanggalMasuk',
  profileUrl: 'profileUrl',
  deleted: 'deleted'
});

exports.Prisma.GuruDetailsScalarFieldEnum = makeEnum({
  guruId: 'guruId',
  userId: 'userId'
});

exports.Prisma.GuruTahfidzDetailsScalarFieldEnum = makeEnum({
  guruId: 'guruId',
  deleted: 'deleted'
});

exports.Prisma.MuridScalarFieldEnum = makeEnum({
  id: 'id',
  nis: 'nis',
  nism: 'nism',
  nisn: 'nisn',
  nama: 'nama',
  jenisKelamin: 'jenisKelamin',
  tempatLahir: 'tempatLahir',
  tanggalLahir: 'tanggalLahir',
  anakKe: 'anakKe',
  jumlahSaudaraKandung: 'jumlahSaudaraKandung',
  jumlahSaudaraTiri: 'jumlahSaudaraTiri',
  jumlahSaudaraAngkat: 'jumlahSaudaraAngkat',
  golonganDarah: 'golonganDarah',
  profileUrl: 'profileUrl',
  deleted: 'deleted'
});

exports.Prisma.MuridDetailsScalarFieldEnum = makeEnum({
  muridId: 'muridId',
  userId: 'userId'
});

exports.Prisma.MuridTahfidzDetailsScalarFieldEnum = makeEnum({
  muridId: 'muridId',
  kelompokTahfidzId: 'kelompokTahfidzId'
});

exports.Prisma.ParentScalarFieldEnum = makeEnum({
  id: 'id',
  nip: 'nip',
  nama: 'nama',
  tempatLahir: 'tempatLahir',
  tanggalLahir: 'tanggalLahir',
  jenisKelamin: 'jenisKelamin',
  agama: 'agama',
  pendidikanTerakhir: 'pendidikanTerakhir',
  penghasilanPerBulan: 'penghasilanPerBulan',
  pekerjaan: 'pekerjaan',
  nomorTelepon: 'nomorTelepon',
  statusHidup: 'statusHidup',
  profileUrl: 'profileUrl',
  deleted: 'deleted'
});

exports.Prisma.ParentDetailsScalarFieldEnum = makeEnum({
  parentId: 'parentId',
  userId: 'userId'
});

exports.Prisma.EventScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  target: 'target',
  targetId: 'targetId',
  userId: 'userId',
  time: 'time'
});

exports.Prisma.HalaqohScalarFieldEnum = makeEnum({
  id: 'id',
  kode: 'kode',
  guruId: 'guruId'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  waktu: 'waktu',
  juz: 'juz',
  halaman: 'halaman',
  awalSetoran: 'awalSetoran',
  akhirSetoran: 'akhirSetoran',
  nilaiTajwid: 'nilaiTajwid',
  nilaiKelancaran: 'nilaiKelancaran',
  nilaiMakhroj: 'nilaiMakhroj',
  nilaiSifatHuruf: 'nilaiSifatHuruf',
  jamTahfidz: 'jamTahfidz',
  muridId: 'muridId'
});

exports.Prisma.JamTahfidzScalarFieldEnum = makeEnum({
  id: 'id',
  waktuMulai: 'waktuMulai',
  waktuSelesai: 'waktuSelesai',
  namaJam: 'namaJam',
  tipe: 'tipe'
});

exports.Prisma.AlQuranScalarFieldEnum = makeEnum({
  id: 'id',
  ayat: 'ayat',
  baris: 'baris',
  halaman: 'halaman',
  surah: 'surah',
  juz: 'juz',
  deleted: 'deleted'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Role = makeEnum({
  ADMIN: 'ADMIN',
  GURU_TAHFIDZ: 'GURU_TAHFIDZ',
  GURU: 'GURU',
  MURID: 'MURID',
  KEPALA_TAHFIDZ: 'KEPALA_TAHFIDZ',
  PARENT: 'PARENT',
  TU: 'TU',
  INPUT_QURAN: 'INPUT_QURAN'
});

exports.JenisKelamin = makeEnum({
  M: 'M',
  F: 'F'
});

exports.GolonganDarah = makeEnum({
  A: 'A',
  B: 'B',
  O: 'O',
  AB: 'AB'
});

exports.Agama = makeEnum({
  Islam: 'Islam',
  Kristen: 'Kristen',
  Buddha: 'Buddha',
  Hindu: 'Hindu',
  Kong_Hu_Chu: 'Kong_Hu_Chu',
  Katolik: 'Katolik'
});

exports.Pendidikan = makeEnum({
  Tidak_Sekolah: 'Tidak_Sekolah',
  SD: 'SD',
  SMP: 'SMP',
  SMA: 'SMA',
  Diploma: 'Diploma',
  S1: 'S1',
  S2: 'S2',
  S3: 'S3'
});

exports.Hidup = makeEnum({
  HIDUP: 'HIDUP',
  MENINGGAL: 'MENINGGAL'
});

exports.TipeEvent = makeEnum({
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  RECOVERY: 'RECOVERY'
});

exports.EventModelType = makeEnum({
  USER: 'USER',
  GURU: 'GURU',
  HALAQOH: 'HALAQOH',
  MURID: 'MURID',
  PARENT: 'PARENT',
  SESSION: 'SESSION',
  ALQURAN: 'ALQURAN',
  JAM_TAHFIDZ: 'JAM_TAHFIDZ',
  ROLES: 'ROLES'
});

exports.TipeSesi = makeEnum({
  Murojah: 'Murojah',
  Hafalan: 'Hafalan'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Roles: 'Roles',
  Guru: 'Guru',
  GuruDetails: 'GuruDetails',
  GuruTahfidzDetails: 'GuruTahfidzDetails',
  Murid: 'Murid',
  MuridDetails: 'MuridDetails',
  MuridTahfidzDetails: 'MuridTahfidzDetails',
  Parent: 'Parent',
  ParentDetails: 'ParentDetails',
  Event: 'Event',
  Halaqoh: 'Halaqoh',
  Session: 'Session',
  JamTahfidz: 'JamTahfidz',
  AlQuran: 'AlQuran'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
